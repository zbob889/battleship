(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>f});var r=t(537),o=t.n(r),a=t(645),l=t.n(a),i=t(667),c=t.n(i),s=new URL(t(473),t.b),p=new URL(t(378),t.b),u=l()(o()),A=c()(s),d=c()(p);u.push([e.id,"* {\n    margin: 0;\n    padding: 0;\n}\n\n@font-face {\n    font-family: 'Wargate';\n    src: url("+A+");\n}\n\n:root {\n    --ship-color: #bbb8d0;\n}\n\n#container {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    height: 100vh;\n    width: 100vw;\n    background-image: url(https://wallpaperaccess.com/full/1486722.jpg);\n    background-size: cover;\n}\n\n#popup {\n    background-color: #ffffff;\n    width: 500px;\n    height: 600px;\n    padding: 30px 40px;\n    position: absolute;\n    transform: translate(-50%,-50%);\n    left: 50%;\n    top: 50%;\n    border-radius: 8px;\n    display: none;\n    flex-direction: column;\n    align-items: center;\n    gap: 16px;\n    font-family: \"Wargate\";\n    font-size: 20px;\n    text-align: center;\n    background-color: lightblue;\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\n}\n\n#gameOver {\n    background-color: #ffffff;\n    width: 500px;\n    height: 300px;\n    padding: 30px 40px;\n    position: absolute;\n    transform: translate(-50%,-50%);\n    left: 50%;\n    top: 50%;\n    border-radius: 8px;\n    display: none;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 16px;\n    font-family: \"Wargate\";\n    font-size: 70px;\n    text-align: center;\n    background-color: lightblue;\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\n}\n\n#rotateButton {\n    height: 50px;\n    width: 100px;\n    outline: none;\n    border-radius: 10px;\n    border: none;\n    background-color: black;\n    color: white;\n    font-size: 20px;\n}\n\n#rotateButton:hover {\n    transform: scale(1.03);\n    box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 12px;\n}\n\n#placementBoard {\n    display: grid;\n    grid-template: repeat(11, 1fr) / repeat(11, 1fr);\n    flex: 1;\n    width: 95%;\n    background-color: teal;\n}\n\n.placementCell {\n    outline: none;\n    border: 1px solid black;\n}\n\n.shipCell {\n    outline: none;\n    border: none;\n    background-color: lightblue;\n}\n\n.takenCell {\n    outline: none;\n    border: none;\n    background-color: var(--ship-color);\n}\n\n.playerShipCell {\n    outline: none;\n    border: 1px solid black;\n    background-color: var(--ship-color);\n}\n\n#title {\n    font-family: 'Wargate';\n    font-size: 90px;\n}\n\n#boards {\n    display: flex;\n    gap: 50px;\n    justify-content: center;\n    align-items: center;\n}\n\n.board {\n    display: grid;\n    grid-template: repeat(11, 1fr) / repeat(11, 1fr);\n    height: 500px;\n    width: 500px;\n    background-image: url(https://besthqwallpapers.com/Uploads/8-12-2021/187140/blue-water-texture-ocean-top-view-water-top-view-blue-wave-background-ocean-waves-background.jpg);\n    background-size: cover;\n}\n\n.player {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 20px;\n}\n\n.boardName {\n    font-family: 'Wargate';\n    font-size: 40px;\n}\n\n#computerBoard {\n\n}\n\n#playerBoard {\n\n}\n\n.computerCell, .playerCell, .textCell {\n    outline: none;\n    border: 1px solid black;\n}\n\n.textCell {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-family: 'Wargate';\n    font-size: 25px;\n    background-color: #0189a2;\n}\n\n.computerCell:hover{\n    transform: scale(1.03);\n    border: 1px solid red;\n}\n\n.cellHit{\n    outline: none;\n    border: 1px solid black;\n    background-color: red;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 36px;\n    text-align: justify;\n    font-family: 'Wargate';\n}\n\n.diag {\n    outline: none;\n    border: 1px solid black;\n    background: url("+d+");\n    background-repeat:no-repeat;\n    background-position:center center;\n    background-size: 100% 100%, auto;\n    background-color: red;\n}\n\n.cellMiss{\n    outline: none;\n    border: 1px solid black;\n    background-color: gray;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,sBAAsB;IACtB,4CAAwD;AAC5D;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,mBAAmB;IACnB,aAAa;IACb,YAAY;IACZ,mEAAmE;IACnE,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,kBAAkB;IAClB,+BAA+B;IAC/B,SAAS;IACT,QAAQ;IACR,kBAAkB;IAClB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;IACT,sBAAsB;IACtB,eAAe;IACf,kBAAkB;IAClB,2BAA2B;IAC3B,uLAAuL;AAC3L;;AAEA;IACI,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,kBAAkB;IAClB,+BAA+B;IAC/B,SAAS;IACT,QAAQ;IACR,kBAAkB;IAClB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;IACvB,SAAS;IACT,sBAAsB;IACtB,eAAe;IACf,kBAAkB;IAClB,2BAA2B;IAC3B,uLAAuL;AAC3L;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,YAAY;IACZ,uBAAuB;IACvB,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,2CAA2C;AAC/C;;AAEA;IACI,aAAa;IACb,gDAAgD;IAChD,OAAO;IACP,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,2BAA2B;AAC/B;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,mCAAmC;AACvC;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mCAAmC;AACvC;;AAEA;IACI,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,SAAS;IACT,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,gDAAgD;IAChD,aAAa;IACb,YAAY;IACZ,6KAA6K;IAC7K,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,sBAAsB;IACtB,eAAe;AACnB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;IACI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,sBAAsB;IACtB,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,sBAAsB;IACtB,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,qBAAqB;IACrB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;IACf,mBAAmB;IACnB,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mDAA8P;IAC9P,2BAA2B;IAC3B,iCAAiC;IACjC,gCAAgC;IAChC,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,sBAAsB;AAC1B",sourcesContent:["* {\n    margin: 0;\n    padding: 0;\n}\n\n@font-face {\n    font-family: 'Wargate';\n    src: url(/Users/zack/repos/battleship/fonts/Wargate.otf);\n}\n\n:root {\n    --ship-color: #bbb8d0;\n}\n\n#container {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    height: 100vh;\n    width: 100vw;\n    background-image: url(https://wallpaperaccess.com/full/1486722.jpg);\n    background-size: cover;\n}\n\n#popup {\n    background-color: #ffffff;\n    width: 500px;\n    height: 600px;\n    padding: 30px 40px;\n    position: absolute;\n    transform: translate(-50%,-50%);\n    left: 50%;\n    top: 50%;\n    border-radius: 8px;\n    display: none;\n    flex-direction: column;\n    align-items: center;\n    gap: 16px;\n    font-family: \"Wargate\";\n    font-size: 20px;\n    text-align: center;\n    background-color: lightblue;\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\n}\n\n#gameOver {\n    background-color: #ffffff;\n    width: 500px;\n    height: 300px;\n    padding: 30px 40px;\n    position: absolute;\n    transform: translate(-50%,-50%);\n    left: 50%;\n    top: 50%;\n    border-radius: 8px;\n    display: none;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 16px;\n    font-family: \"Wargate\";\n    font-size: 70px;\n    text-align: center;\n    background-color: lightblue;\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\n}\n\n#rotateButton {\n    height: 50px;\n    width: 100px;\n    outline: none;\n    border-radius: 10px;\n    border: none;\n    background-color: black;\n    color: white;\n    font-size: 20px;\n}\n\n#rotateButton:hover {\n    transform: scale(1.03);\n    box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 12px;\n}\n\n#placementBoard {\n    display: grid;\n    grid-template: repeat(11, 1fr) / repeat(11, 1fr);\n    flex: 1;\n    width: 95%;\n    background-color: teal;\n}\n\n.placementCell {\n    outline: none;\n    border: 1px solid black;\n}\n\n.shipCell {\n    outline: none;\n    border: none;\n    background-color: lightblue;\n}\n\n.takenCell {\n    outline: none;\n    border: none;\n    background-color: var(--ship-color);\n}\n\n.playerShipCell {\n    outline: none;\n    border: 1px solid black;\n    background-color: var(--ship-color);\n}\n\n#title {\n    font-family: 'Wargate';\n    font-size: 90px;\n}\n\n#boards {\n    display: flex;\n    gap: 50px;\n    justify-content: center;\n    align-items: center;\n}\n\n.board {\n    display: grid;\n    grid-template: repeat(11, 1fr) / repeat(11, 1fr);\n    height: 500px;\n    width: 500px;\n    background-image: url(https://besthqwallpapers.com/Uploads/8-12-2021/187140/blue-water-texture-ocean-top-view-water-top-view-blue-wave-background-ocean-waves-background.jpg);\n    background-size: cover;\n}\n\n.player {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 20px;\n}\n\n.boardName {\n    font-family: 'Wargate';\n    font-size: 40px;\n}\n\n#computerBoard {\n\n}\n\n#playerBoard {\n\n}\n\n.computerCell, .playerCell, .textCell {\n    outline: none;\n    border: 1px solid black;\n}\n\n.textCell {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-family: 'Wargate';\n    font-size: 25px;\n    background-color: #0189a2;\n}\n\n.computerCell:hover{\n    transform: scale(1.03);\n    border: 1px solid red;\n}\n\n.cellHit{\n    outline: none;\n    border: 1px solid black;\n    background-color: red;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 36px;\n    text-align: justify;\n    font-family: 'Wargate';\n}\n\n.diag {\n    outline: none;\n    border: 1px solid black;\n    background: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' version='1.1' preserveAspectRatio='none' viewBox='0 0 100 100'><path d='M1 0 L0 1 L99 100 L100 99' fill='black' /><path d='M0 99 L99 0 L100 1 L1 100' fill='black' /></svg>\");\n    background-repeat:no-repeat;\n    background-position:center center;\n    background-size: 100% 100%, auto;\n    background-color: red;\n}\n\n.cellMiss{\n    outline: none;\n    border: 1px solid black;\n    background-color: gray;\n}"],sourceRoot:""}]);const f=u},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(l[c]=!0)}for(var s=0;s<e.length;s++){var p=[].concat(e[s]);r&&l[p[0]]||(void 0!==a&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=a),t&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=t):p[2]=t),o&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=o):p[4]="".concat(o)),n.push(p))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),l=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(l).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},l=[],i=0;i<e.length;i++){var c=e[i],s=r.base?c[0]+r.base:c[0],p=a[s]||0,u="".concat(s," ").concat(p);a[s]=p+1;var A=t(u),d={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)n[A].references++,n[A].updater(d);else{var f=o(d,r);r.byIndex=i,n.splice(i,0,{identifier:u,updater:f,references:1})}l.push(u)}return l}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var l=0;l<a.length;l++){var i=t(a[l]);n[i].references--}for(var c=r(e,o),s=0;s<a.length;s++){var p=t(a[s]);0===n[p].references&&(n[p].updater(),n.splice(p,1))}a=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},378:e=>{e.exports="data:image/svg+xml;utf8,<svg xmlns=%27http://www.w3.org/2000/svg%27 version=%271.1%27 preserveAspectRatio=%27none%27 viewBox=%270 0 100 100%27><path d=%27M1 0 L0 1 L99 100 L100 99%27 fill=%27black%27 /><path d=%27M0 99 L99 0 L100 1 L1 100%27 fill=%27black%27 /></svg>"},473:(e,n,t)=>{e.exports=t.p+"190cbce636f3647630f2.otf"}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),a=t(569),l=t.n(a),i=t(565),c=t.n(i),s=t(216),p=t.n(s),u=t(589),A=t.n(u),d=t(426),f={};function m(e,n,t,r){let o=document.createElement(`${e}`);o.className=`${n}`,o.setAttribute("id",`${t}`),document.getElementById(`${r}`).appendChild(o)}function h(e,n){document.getElementById(`${e}`).innerHTML=`${n}`}f.styleTagTransform=A(),f.setAttributes=c(),f.insert=l().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=p(),n()(d.Z,f),d.Z&&d.Z.locals&&d.Z.locals;const C=(()=>{const e=document.getElementById("gameOver");return{player:(()=>{let n=!1;return{ships:[],misses:[],hits:[],lost:n,checkForLoss:function(){let t=this.ships.filter((e=>0==e.sunk));0==t.length?(e.style.display="flex",h("gameOverText","Player has lost the game!"),n=!0):0!==t.length&&(n=!1)}}})(),computer:(()=>{let n=!1;return{ships:[],misses:[],hits:[],lost:n,checkForLoss:function(){let t=this.ships.filter((e=>1==e.sunk));5==t.length?(e.style.display="flex",h("gameOverText","Player has won the game!"),n=!0):5!==t.length&&(n=!1)}}})()}})(),g=(e,n)=>({name:e,length:n,boardLocation:void 0,sunk:!1,hitNumber:0,hit:function(){this.hitNumber++},isSunk:function(){this.hitNumber==this.length?(this.sunk=!0,console.log("Ship sunk")):0!=n&&(this.sunk=!1)},sunkCells:function(){if(1==this.sunk){const e=this.boardLocation;for(let n=0;n<e.length+1;n++)document.getElementById(`${e[n]}`).className="diag"}}}),B=(()=>{const e=(e,n,t)=>{const r=g(`${e}`,n);return r.boardLocation=t,r};return{createShipAtLocation:e,createPlayerShip:(e,n,t)=>{const r=g(`${e}`,n);r.boardLocation=t,C.player.ships.push(r)},place:(n,t,r,o,a,l)=>{if(r==o){let o=l+1-a;const i=[];if("player"==`${t}`){for(let e=a-1;e<l;e++)i.push(r+`${e+1}Player`);return C.player.ships.push(e(n,o,i)),C.player.ships}if("computer"==`${t}`){for(let e=a-1;e<l;e++)i.push(r+`${e+1}Computer`);C.computer.ships.push(e(n,o,i))}}else if(a==l){let l=r.charCodeAt(0)-97,i=o.charCodeAt(0)-97,c=i+1-l;const s=[];if("player"==`${t}`){for(let e=l;e<i+1;e++){let n=String.fromCharCode(e+97);s.push(`${n}`+a+"Player")}C.player.ships.push(e(n,c,s))}else if("computer"==`${t}`){for(let e=l;e<i+1;e++){let n=String.fromCharCode(e+97);s.push(`${n}`+a+"Computer")}C.computer.ships.push(e(n,c,s))}}},receiveAttack:e=>{if(1==e.includes("Player")){let n=C.player.ships.find((n=>n.boardLocation.includes(`${e}`)));void 0!==n?(n.hit(),n.isSunk(),C.player.checkForLoss(),C.computer.hits.push(`${e}`),document.getElementById(`${e}`).className="cellHit",n.sunkCells()):null==n&&(C.computer.misses.push(`${e}`),document.getElementById(`${e}`).className="cellMiss")}else if(1==e.includes("Computer")){let n=C.computer.ships.find((n=>n.boardLocation.includes(`${e}`)));void 0!==n?(n.hit(),n.isSunk(),C.computer.checkForLoss(),C.player.hits.push(`${e}`),document.getElementById(`${e}`).className="cellHit",n.sunkCells()):null==n&&(C.player.misses.push(`${e}`),document.getElementById(`${e}`).className="cellMiss")}}}})(),b=e=>String.fromCharCode(e+97),y=e=>e.charCodeAt(0)-97;function x(){let e=C.computer.misses,n=C.computer.hits,t=e.concat(n),r=String.fromCharCode(Math.floor(10*Math.random())+97)+(Math.floor(10*Math.random())+1)+"Player",o=t.find((e=>e==r));void 0!==o?x():null==o&&B.receiveAttack(r),console.log("randomMove")}function v(e){return e.length!=new Set(e).size}function I(){console.log("Bundling move");let e=C.computer.misses,n=C.computer.hits,t=[],r=[],o=C.player.ships.filter((e=>1==e.sunk)),a=[];o.forEach((e=>{e.boardLocation.forEach((e=>{a.push(e)}))}));let l=n.filter((e=>!a.includes(e))),i=l.map((e=>e.charAt(0))),c=l.map((e=>e.replace(/\D/g,"")));if(1==E(c)&&0==E(i))for(let e=0;e<c.length;e++){let n=i[0],r=c[e];if(1!=r){let e=n+(r-1)+"Player";t.push(e)}if(10!=r){let e=n+(Number(r)+1)+"Player";t.push(e)}}else if(1==E(i)&&0==E(c))for(let e=0;e<i.length;e++){let n=c[0],r=i[e];if("a"!=r){let e=b(y(r)-1)+n+"Player";t.push(e)}if("j"!=r){let e=b(y(r)+1)+n+"Player";t.push(e)}}else if(1==E(c)&&1==E(i)){let e=l[k(l.length)],n=e.charAt(0),r=e.replace(/\D/g,"");if("a"!=n){let e=b(y(n)-1)+r+"Player";t.push(e)}if("j"!=n){let e=b(y(n)+1)+r+"Player";t.push(e)}if(1!=r){let e=n+(r-1)+"Player";t.push(e)}if(10!=r){let e=n+(Number(r)+1)+"Player";t.push(e)}}t.forEach((t=>{e.includes(t)||n.includes(t)||r.push(t)}));let s=k(r.length),p=r[s];null==p&&I(),B.receiveAttack(p)}function k(e){return Math.floor(Math.random()*e)}function E(e){return e.length!=new Set(e).size}const S=(()=>{function e(){let e=C.computer.misses,n=C.computer.hits,t=[],r=[],o=C.player.ships.filter((e=>1==e.sunk)),a=[];o.forEach((e=>{e.boardLocation.forEach((e=>{a.push(e)}))}));let l=n.filter((e=>!a.includes(e))),i=l.map((e=>e.charAt(0))),c=l.map((e=>e.replace(/\D/g,"")));if(1==w(i))for(let e=0;e<c.length;e++){let n=i[0],r=c[e];if(1!=r){let e=n+(r-1)+"Player";t.push(e)}if(10!=r){let e=n+(Number(r)+1)+"Player";t.push(e)}}else if(1==w(c))for(let e=0;e<i.length;e++){let n=c[0],r=i[e];if("a"!=r){let e=b(y(r)-1)+n+"Player";t.push(e)}if("j"!=r){let e=b(y(r)+1)+n+"Player";t.push(e)}}return t.forEach((t=>{e.includes(t)||n.includes(t)||r.push(t)})),0==r.length&&0!=l.length||0==r.length&&0!=l.length&&void 0}return{randomTest:function(){let e=C.computer.hits,n=C.player.ships.filter((e=>1==e.sunk)),t=[];n.forEach((e=>{e.boardLocation.forEach((e=>{t.push(e)}))}));let r=e.filter((e=>!t.includes(e)));return 0==r.length||0==r.length&&void 0},adjacentTest:function(){let e=C.computer.hits,n=C.player.ships.filter((e=>1==e.sunk)),t=[];n.forEach((e=>{e.boardLocation.forEach((e=>{t.push(e)}))}));let r=e.filter((e=>!t.includes(e)));return 1==r.length||1==r.length&&void 0},inARowTest:function(){C.computer.misses;let n=C.computer.hits,t=C.player.ships.filter((e=>1==e.sunk)),r=[];t.forEach((e=>{e.boardLocation.forEach((e=>{r.push(e)}))}));let o=n.filter((e=>!r.includes(e)));return o.length>1&&0==e()||!(o.length>1&&0!=e())&&void 0},bundlingTest:e}})();function w(e){return e.length!=new Set(e).size}function $(){1==S.randomTest()?x():1==S.adjacentTest()?function(){console.log("adjacentMove");let e=C.computer.misses,n=C.computer.hits,t=[],r=[],o=C.player.ships.filter((e=>1==e.sunk)),a=[];o.forEach((e=>{e.boardLocation.forEach((e=>{a.push(e)}))}));let l=n.filter((e=>!a.includes(e)));for(let e=0;e<l.length;e++){let n=l[e].charAt(0),r=l[e].replace(/\D/g,"");if("a"!=n){let e=b(y(n)-1)+r+"Player";t.push(e)}if("j"!=n){let e=b(y(n)+1)+r+"Player";t.push(e)}if(1!=r){let e=n+(r-1)+"Player";t.push(e)}if(10!=r){let e=n+(Number(r)+1)+"Player";t.push(e)}}t.forEach((t=>{e.includes(t)||n.includes(t)||r.push(t)}));let i=(c=r.length,Math.floor(Math.random()*c));var c;let s=r[i];B.receiveAttack(s)}():1==S.inARowTest()?function(){console.log("inARowMove");let e=C.computer.misses,n=C.computer.hits,t=[],r=[],o=C.player.ships.filter((e=>1==e.sunk)),a=[];o.forEach((e=>{e.boardLocation.forEach((e=>{a.push(e)}))}));let l=n.filter((e=>!a.includes(e))),i=l.map((e=>e.charAt(0))),c=l.map((e=>e.replace(/\D/g,"")));if(1==v(i))for(let e=0;e<c.length;e++){let n=i[0],r=c[e];if(1!=r){let e=n+(r-1)+"Player";t.push(e)}if(10!=r){let e=n+(Number(r)+1)+"Player";t.push(e)}}else if(1==v(c))for(let e=0;e<i.length;e++){let n=c[0],r=i[e];if("a"!=r){let e=b(y(r)-1)+n+"Player";t.push(e)}if("j"!=r){let e=b(y(r)+1)+n+"Player";t.push(e)}}t.forEach((t=>{e.includes(t)||n.includes(t)||r.push(t)}));let s=(p=r.length,Math.floor(Math.random()*p));var p;let u=r[s];B.receiveAttack(u)}():1==S.bundlingTest()&&I()}const L=(C.computer.misses,C.computer.hits,{attackPlayer:function(){let e=$();B.receiveAttack(e)}}),P=e=>{let n="horizontal";document.getElementById("rotateButton").addEventListener("click",(()=>{"horizontal"==n?n="vertical":"vertical"==n&&(n="horizontal")}));const t=document.getElementById("placementBoard");function r(t){if("placementCell"==t.target.className){let r=t.target.id,o=r.charAt(0),a=Number(r.slice(1));if("vertical"==n){5==e&&a>=7&&(a=6),4==e&&a>=8&&(a=7),3==e&&a>=9&&(a=8),10==a&&2==e&&(a=9);for(let n=0;n<e;n++){let e=`${o+(a+n)}`;"takenCell"!==document.getElementById(`${e}`).className&&(document.getElementById(`${e}`).className="shipCell")}}else if("horizontal"==n){Number(o.charCodeAt(0)-96)>=7&&5==e&&(o="f"),Number(o.charCodeAt(0)-96)>=8&&4==e&&(o="g"),Number(o.charCodeAt(0)-96)>=9&&3==e&&(o="h"),10==Number(o.charCodeAt(0)-96)&&42==e&&(o="i");for(let n=0;n<e;n++){let e=`${String.fromCharCode(o.charCodeAt(0)+n)+a}`;"takenCell"!==document.getElementById(`${e}`).className&&(document.getElementById(`${e}`).className="shipCell")}}}}function o(t){if("shipCell"==t.target.className){let r=t.target.id,o=r.charAt(0),a=Number(r.slice(1));if("vertical"==n){5==e&&a>=7&&(a=6),4==e&&a>=8&&(a=7),3==e&&a>=9&&(a=8),10==a&&2==e&&(a=9);for(let n=0;n<e;n++){let e=`${o+(a+n)}`;"takenCell"!==document.getElementById(`${e}`).className&&(document.getElementById(`${e}`).className="placementCell")}}else if("horizontal"==n){Number(o.charCodeAt(0)-96)>=7&&5==e&&(o="f"),Number(o.charCodeAt(0)-96)>=8&&4==e&&(o="g"),Number(o.charCodeAt(0)-96)>=9&&3==e&&(o="h"),10==Number(o.charCodeAt(0)-96)&&42==e&&(o="i");for(let n=0;n<e;n++){let e=`${String.fromCharCode(o.charCodeAt(0)+n)+a}`;"takenCell"!==document.getElementById(`${e}`).className&&(document.getElementById(`${e}`).className="placementCell")}}}}return t.addEventListener("mouseover",r),t.addEventListener("mouseout",o),t.addEventListener("click",(()=>{t.removeEventListener("mouseover",r),t.removeEventListener("mouseout",o)})),{changeToPlacement:o,changeToShip:r}};!function(){for(let e=0;e<121;e++)if(e<1)m("p","textCell","","playerBoard"),m("p","textCell","","computerBoard");else if(e<11){let n=String.fromCharCode(e+96),t=n.toUpperCase();m("p","textCell",`${n+1}`,"playerBoard"),h(`${n+1}`,`${t}`),m("p","textCell",`${n+2}`,"computerBoard"),h(`${n+2}`,`${t}`)}else if(e>10)if(e%11==0){let n=e/11;m("p","textCell",n+"player","playerBoard"),h(n+"player",`${n}`),m("p","textCell",n+"computer","computerBoard"),h(n+"computer",`${n}`)}else if(e%11!=0)if(e<22){let n=String.fromCharCode(e+85);m("div","playerCell",n+1+"Player","playerBoard"),m("div","computerCell",n+1+"Computer","computerBoard")}else if(e<33){let n=String.fromCharCode(e+74);m("div","playerCell",n+2+"Player","playerBoard"),m("div","computerCell",n+2+"Computer","computerBoard")}else if(e<44){let n=String.fromCharCode(e+63);m("div","playerCell",n+3+"Player","playerBoard"),m("div","computerCell",n+3+"Computer","computerBoard")}else if(e<55){let n=String.fromCharCode(e+52);m("div","playerCell",n+4+"Player","playerBoard"),m("div","computerCell",n+4+"Computer","computerBoard")}else if(e<66){let n=String.fromCharCode(e+41);m("div","playerCell",n+5+"Player","playerBoard"),m("div","computerCell",n+5+"Computer","computerBoard")}else if(e<77){let n=String.fromCharCode(e+30);m("div","playerCell",n+6+"Player","playerBoard"),m("div","computerCell",n+6+"Computer","computerBoard")}else if(e<88){let n=String.fromCharCode(e+19);m("div","playerCell",n+7+"Player","playerBoard"),m("div","computerCell",n+7+"Computer","computerBoard")}else if(e<99){let n=String.fromCharCode(e+8);m("div","playerCell",n+8+"Player","playerBoard"),m("div","computerCell",n+8+"Computer","computerBoard")}else if(e<110){let n=String.fromCharCode(e-3);m("div","playerCell",n+9+"Player","playerBoard"),m("div","computerCell",n+9+"Computer","computerBoard")}else if(e<121){let n=String.fromCharCode(e-14);m("div","playerCell",n+10+"Player","playerBoard"),m("div","computerCell",n+10+"Computer","computerBoard")}}();let N=document.getElementById("computerBoard");N.addEventListener("click",(e=>{if("computerCell"==e.target.className){let n=e.target.id;B.receiveAttack(n)}})),N.addEventListener("mouseup",(e=>{let n=C.computer.lost,t=e.target.className;0==n&&"computerCell"==t&&L.attackPlayer()})),document.getElementById("popup").style.display="flex",function(){for(let e=0;e<121;e++)if(e<1)m("p","textCell","","placementBoard");else if(e<11){let n=String.fromCharCode(e+96),t=n.toUpperCase();m("p","textCell",`${n}`,"placementBoard"),h(`${n}`,`${t}`)}else if(e>10)if(e%11==0){let n=e/11;m("p","textCell",n+"placement","placementBoard"),h(n+"placement",`${n}`)}else e%11!=0&&(e<22?m("div","placementCell",`${String.fromCharCode(e+85)+1}`,"placementBoard"):e<33?m("div","placementCell",`${String.fromCharCode(e+74)+2}`,"placementBoard"):e<44?m("div","placementCell",`${String.fromCharCode(e+63)+3}`,"placementBoard"):e<55?m("div","placementCell",`${String.fromCharCode(e+52)+4}`,"placementBoard"):e<66?m("div","placementCell",`${String.fromCharCode(e+41)+5}`,"placementBoard"):e<77?m("div","placementCell",`${String.fromCharCode(e+30)+6}`,"placementBoard"):e<88?m("div","placementCell",`${String.fromCharCode(e+19)+7}`,"placementBoard"):e<99?m("div","placementCell",`${String.fromCharCode(e+8)+8}`,"placementBoard"):e<110?m("div","placementCell",`${String.fromCharCode(e-3)+9}`,"placementBoard"):e<121&&m("div","placementCell",`${String.fromCharCode(e-14)+10}`,"placementBoard"))}(),document.getElementById("placementBoard"),function(){let e=1;const n=document.getElementById("placementBoard");n.addEventListener("click",(function(){let n=[],t=document.querySelectorAll(".shipCell");t.forEach((e=>{n.push(e.id+"Player")})),1==e&&5!==t.length||2==e&&4!==t.length||3==e&&3!==t.length||4==e&&3!==t.length||5==e&&2!==t.length?t.forEach((e=>{e.className="placementCell"})):(1==e&&5==t.length?B.createPlayerShip("playerCarrier",5,n):2==e&&4==t.length?B.createPlayerShip("playerBattleship",4,n):3==e&&3==t.length?B.createPlayerShip("playerDestroyer",3,n):4==e&&3==t.length?B.createPlayerShip("playerSubmarine",3,n):5==e&&2==t.length&&(B.createPlayerShip("playerPatrolBoat",2,n),document.getElementById("popup").style.display="none",function(){let e=C.player.ships,n=[];e.forEach((e=>{for(let t=0;t<e.boardLocation.length;t++)n.push(e.boardLocation[t])})),n.forEach((e=>{document.getElementById(`${e}`).className="playerShipCell"}))}()),t.forEach((e=>{e.className="takenCell"})),e++)})),n.addEventListener("mouseover",(function(){1==e?P(5):2==e?(h("popupText","PLACE YOUR BATTLESHIP"),P(4)):3==e?(h("popupText","PLACE YOUR DESTROYER"),P(3)):4==e?(h("popupText","PLACE YOUR SUBMARINE"),P(3)):5==e&&(h("popupText","PLACE YOUR PATROL BOAT"),P(2))}))}(),function(){function e(o,a){!function(o,a){let l=Math.floor(2*Math.random());if(0==l){let i=r(10),c=r(10);c+o>10&&(c-=o);let s=c+o-1;c=b(c),s=b(s);let p=t(n(l,i,i,c,s));"not taken"==p?B.place(a,"computer",c,s,i,i):"taken"==p&&e(o,a)}else if(1==l){let i=b(r(10)-1),c=r(10);c+o>10&&(c-=o);let s=c+o-1,p=t(n(l,c,s,i,i));"not taken"==p?B.place(a,"computer",i,i,c,s):"taken"==p&&e(o,a)}}(o,a)}function n(e,n,t,r,o){if(1==e){const e=[];for(let o=n-1;o<t;o++)e.push(r+`${o+1}Computer`);return e}if(0==e){let e=r.charCodeAt(0)-97,t=o.charCodeAt(0)-97;const a=[];for(let r=e;r<t+1;r++){let e=String.fromCharCode(r+97);a.push(`${e}`+n+"Computer")}return a}}function t(e){let n="not taken";for(let t=0;t<e.length+1;t++){let r=e[t],o=C.computer.ships.find((e=>e.boardLocation.includes(`${r}`)));if(void 0!==o)return n="taken",n;null==o&&(n="not taken")}return n}function r(e){return Math.floor(Math.random()*e)+1}e(5,"computerCarrier"),e(4,"computerBattleship"),e(3,"computerDestroyer"),e(3,"computerSubmarine"),e(2,"computerPatrolBoat")}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,