(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(537),o=n.n(r),a=n(645),l=n.n(a),i=n(667),s=n.n(i),c=new URL(n(473),n.b),p=l()(o()),u=s()(c);p.push([e.id,"* {\n    margin: 0;\n    padding: 0;\n}\n\n@font-face {\n    font-family: 'Wargate';\n    src: url("+u+");\n}\n\n#container {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    height: 100vh;\n    width: 100vw;\n    background-image: url(https://wallpaperaccess.com/full/1486722.jpg);\n    background-size: cover;\n}\n\n#title {\n    font-family: 'Wargate';\n    font-size: 90px;\n}\n\n#boards {\n    display: flex;\n    gap: 50px;\n    justify-content: center;\n    align-items: center;\n}\n\n.board {\n    display: grid;\n    grid-template: repeat(11, 1fr) / repeat(11, 1fr);\n    height: 500px;\n    width: 500px;\n    background-image: url(https://besthqwallpapers.com/Uploads/8-12-2021/187140/blue-water-texture-ocean-top-view-water-top-view-blue-wave-background-ocean-waves-background.jpg);\n    background-size: cover;\n}\n\n.player {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 20px;\n}\n\n.boardName {\n    font-family: 'Wargate';\n    font-size: 40px;\n}\n\n#computerBoard {\n\n}\n\n#playerBoard {\n\n}\n\n.computerCell, .playerCell, .textCell {\n    outline: none;\n    border: 1px solid black;\n}\n\n.textCell {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-family: 'Wargate';\n    font-size: 25px;\n    background-color: #0189a2;\n}\n\n.computerCell:hover{\n    transform: scale(1.03);\n    border: 1px solid red;\n}\n\n.cellHit{\n    outline: none;\n    border: 1px solid black;\n    background-color: red;\n}\n\n.cellMiss{\n    outline: none;\n    border: 1px solid black;\n    background-color: gray;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,sBAAsB;IACtB,4CAAwD;AAC5D;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,mBAAmB;IACnB,aAAa;IACb,YAAY;IACZ,mEAAmE;IACnE,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,SAAS;IACT,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,gDAAgD;IAChD,aAAa;IACb,YAAY;IACZ,6KAA6K;IAC7K,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,sBAAsB;IACtB,eAAe;AACnB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;IACI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,sBAAsB;IACtB,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,sBAAsB;IACtB,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,sBAAsB;AAC1B",sourcesContent:["* {\n    margin: 0;\n    padding: 0;\n}\n\n@font-face {\n    font-family: 'Wargate';\n    src: url(/Users/zack/repos/battleship/fonts/Wargate.otf);\n}\n\n#container {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    height: 100vh;\n    width: 100vw;\n    background-image: url(https://wallpaperaccess.com/full/1486722.jpg);\n    background-size: cover;\n}\n\n#title {\n    font-family: 'Wargate';\n    font-size: 90px;\n}\n\n#boards {\n    display: flex;\n    gap: 50px;\n    justify-content: center;\n    align-items: center;\n}\n\n.board {\n    display: grid;\n    grid-template: repeat(11, 1fr) / repeat(11, 1fr);\n    height: 500px;\n    width: 500px;\n    background-image: url(https://besthqwallpapers.com/Uploads/8-12-2021/187140/blue-water-texture-ocean-top-view-water-top-view-blue-wave-background-ocean-waves-background.jpg);\n    background-size: cover;\n}\n\n.player {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 20px;\n}\n\n.boardName {\n    font-family: 'Wargate';\n    font-size: 40px;\n}\n\n#computerBoard {\n\n}\n\n#playerBoard {\n\n}\n\n.computerCell, .playerCell, .textCell {\n    outline: none;\n    border: 1px solid black;\n}\n\n.textCell {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-family: 'Wargate';\n    font-size: 25px;\n    background-color: #0189a2;\n}\n\n.computerCell:hover{\n    transform: scale(1.03);\n    border: 1px solid red;\n}\n\n.cellHit{\n    outline: none;\n    border: 1px solid black;\n    background-color: red;\n}\n\n.cellMiss{\n    outline: none;\n    border: 1px solid black;\n    background-color: gray;\n}"],sourceRoot:""}]);const d=p},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(l[s]=!0)}for(var c=0;c<e.length;c++){var p=[].concat(e[c]);r&&l[p[0]]||(void 0!==a&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=a),n&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=n):p[2]=n),o&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=o):p[4]="".concat(o)),t.push(p))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),l=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(l).concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},l=[],i=0;i<e.length;i++){var s=e[i],c=r.base?s[0]+r.base:s[0],p=a[c]||0,u="".concat(c," ").concat(p);a[c]=p+1;var d=n(u),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)t[d].references++,t[d].updater(A);else{var m=o(A,r);r.byIndex=i,t.splice(i,0,{identifier:u,updater:m,references:1})}l.push(u)}return l}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var l=0;l<a.length;l++){var i=n(a[l]);t[i].references--}for(var s=r(e,o),c=0;c<a.length;c++){var p=n(a[c]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}a=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},473:(e,t,n)=>{e.exports=n.p+"190cbce636f3647630f2.otf"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),a=n(569),l=n.n(a),i=n(565),s=n.n(i),c=n(216),p=n.n(c),u=n(589),d=n.n(u),A=n(426),m={};function f(e,t,n,r){let o=document.createElement(`${e}`);o.className=`${t}`,o.setAttribute("id",`${n}`),document.getElementById(`${r}`).appendChild(o)}function C(e,t){document.getElementById(`${e}`).innerHTML=`${t}`}m.styleTagTransform=d(),m.setAttributes=s(),m.insert=l().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=p(),t()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;const h=(e,t)=>({name:e,length:t,boardLocation:void 0,sunk:!1,hitNumber:0,hit:function(){this.hitNumber++},isSunk:function(){this.hitNumber==this.length?(this.sunk=!0,console.log("Ship sunk")):0!=t&&(this.sunk=!1)}}),y={player:(()=>{let e=!1;return{ships:[],misses:[],hits:[],lost:e,checkForLoss:function(){let t=this.ships.filter((e=>0==e.sunk));0==t.length?(e=!0,console.log("Player has lost.")):0!==t.length&&(e=!1)}}})(),computer:(()=>{let e=!1;return{ships:[],misses:[],hits:[],lost:e,checkForLoss:function(){let t=this.ships.filter((e=>0==e.sunk));0==t.length?(e=!0,console.log("Computer has lost.")):0!==t.length&&(e=!1)}}})()};function g(e,t,n){const r=h(`${e}`,t);return r.boardLocation=n,r}const B=(e,t,n,r,o,a)=>{if(n==r){let r=a+1-o;const l=[];if("player"==`${t}`){for(let e=o-1;e<a;e++)l.push(n+`${e+1}Player`);return y.player.ships.push(g(e,r,l)),y.player.ships}if("computer"==`${t}`){for(let e=o-1;e<a;e++)l.push(n+`${e+1}Computer`);y.computer.ships.push(g(e,r,l))}}else if(o==a){let a=n.charCodeAt(0)-97,l=r.charCodeAt(0)-97,i=l+1-a;const s=[];if("player"==`${t}`){for(let e=a;e<l+1;e++){let t=String.fromCharCode(e+97);s.push(`${t}`+o+"Player")}y.player.ships.push(g(e,i,s))}else if("computer"==`${t}`){for(let e=a;e<l+1;e++){let t=String.fromCharCode(e+97);s.push(`${t}`+o+"Computer")}y.computer.ships.push(g(e,i,s))}}},v=e=>{if(1==e.includes("Player")){let t=y.player.ships.find((t=>t.boardLocation.includes(`${e}`)));void 0!==t?(t.hit(),t.isSunk(),y.player.checkForLoss(),y.computer.hits.push(`${e}`),document.getElementById(`${e}`).className="cellHit"):null==t&&(y.computer.misses.push(`${e}`),document.getElementById(`${e}`).className="cellMiss")}else if(1==e.includes("Computer")){let t=y.computer.ships.find((t=>t.boardLocation.includes(`${e}`)));void 0!==t?(t.hit(),t.isSunk(),y.computer.checkForLoss(),y.computer.hits.push(`${e}`),document.getElementById(`${e}`).className="cellHit"):null==t&&(y.computer.misses.push(`${e}`),document.getElementById(`${e}`).className="cellMiss")}},b=(()=>{let e,t=y.player.misses,n=y.player.hits,r=t.concat(n);return{attackPlayer:function t(){!function(){let t=String.fromCharCode(Math.floor(10*Math.random())+97),n=Math.floor(10*Math.random())+1;e=t+n+"Player"}();let n=r.find((t=>t==e));void 0!==n?t():null==n&&v(e)}}})();!function(){for(let e=0;e<121;e++)if(e<1)f("p","textCell","","playerBoard"),f("p","textCell","","computerBoard");else if(e<11){let t=String.fromCharCode(e+96),n=t.toUpperCase();f("p","textCell",`${t+1}`,"playerBoard"),C(`${t+1}`,`${n}`),f("p","textCell",`${t+2}`,"computerBoard"),C(`${t+2}`,`${n}`)}else if(e>10)if(e%11==0){let t=e/11;f("p","textCell",t+"player","playerBoard"),C(t+"player",`${t}`),f("p","textCell",t+"computer","computerBoard"),C(t+"computer",`${t}`)}else if(e%11!=0)if(e<22){let t=String.fromCharCode(e+85);f("div","playerCell",t+1+"Player","playerBoard"),f("div","computerCell",t+1+"Computer","computerBoard")}else if(e<33){let t=String.fromCharCode(e+74);f("div","playerCell",t+2+"Player","playerBoard"),f("div","computerCell",t+2+"Computer","computerBoard")}else if(e<44){let t=String.fromCharCode(e+63);f("div","playerCell",t+3+"Player","playerBoard"),f("div","computerCell",t+3+"Computer","computerBoard")}else if(e<55){let t=String.fromCharCode(e+52);f("div","playerCell",t+4+"Player","playerBoard"),f("div","computerCell",t+4+"Computer","computerBoard")}else if(e<66){let t=String.fromCharCode(e+41);f("div","playerCell",t+5+"Player","playerBoard"),f("div","computerCell",t+5+"Computer","computerBoard")}else if(e<77){let t=String.fromCharCode(e+30);f("div","playerCell",t+6+"Player","playerBoard"),f("div","computerCell",t+6+"Computer","computerBoard")}else if(e<88){let t=String.fromCharCode(e+19);f("div","playerCell",t+7+"Player","playerBoard"),f("div","computerCell",t+7+"Computer","computerBoard")}else if(e<99){let t=String.fromCharCode(e+8);f("div","playerCell",t+8+"Player","playerBoard"),f("div","computerCell",t+8+"Computer","computerBoard")}else if(e<110){let t=String.fromCharCode(e-3);f("div","playerCell",t+9+"Player","playerBoard"),f("div","computerCell",t+9+"Computer","computerBoard")}else if(e<121){let t=String.fromCharCode(e-14);f("div","playerCell",t+10+"Player","playerBoard"),f("div","computerCell",t+10+"Computer","computerBoard")}}(),document.getElementById("computerBoard").addEventListener("click",(e=>{if("computerCell"==e.target.className){let t=e.target.id;v(t);let n=y.computer.lost;0==n?b.attackPlayer():1==n&&console.log("The computer has lost")}})),B("playerCarrier","player","a","a",1,5),B("playerBattleship","player","b","e",1,1),B("playerDestroyer","player","g","i",6,6),B("playerSubmarine","player","g","i",7,7),B("playerPatrolBoat","player","a","b",10,10),B("computerCarrier","computer","a","a",1,5),B("computerBattleship","computer","b","e",1,1),B("computerDestroyer","computer","g","i",6,6),B("computerSubmarine","computer","g","i",7,7),B("computerPatrolBoat","computer","a","b",10,10)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,